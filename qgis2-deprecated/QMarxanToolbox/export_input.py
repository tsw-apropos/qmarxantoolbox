# -*- coding: utf-8 -*-

"""
/***************************************************************************
 QMarxanToolbox
                                 A QGIS plugin
 Marxan Processing tools for QGIS
                              -------------------
        begin                : 2016-09-02
        copyright            : (C) 2016 by Apropos Information Systems Inc
        email                : tsw@aproposinfosytems.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Apropos Information Systems Inc'
__date__ = '2016-09-02'
__copyright__ = '(C) 2016 by Apropos Information Systems Inc'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os, sys
from qgis.core import *

from processing.core.GeoAlgorithm import GeoAlgorithm
from processing.core.parameters import ParameterFile
from processing.tools import dataobjects

class ExportInput(GeoAlgorithm):

    OUT_DIR = 'OUT_DIR'

    def defineCharacteristics(self):
        """Define tool placement and parameters"""
        
        # The name that the user will see in the toolbox
        self.name = 'Create Input File and Folders'

        # The branch of the toolbox under which the algorithm will appear
        self.group = 'Export to Marxan'

        self.addParameter(ParameterFile(self.OUT_DIR,self.tr('Select directory for input.dat and input and output folders.'), \
            True, False))

    #
    # create input.dat file
    #
    def createInputFile(self,outFName):

        #
        # formatAsME - format as Marxan Exponent format like 
        #              Input File Editor
        #
        def formatAsME(inVal):
            outStr = "%.14E" % float(inVal)
            parts = outStr.split('E')
            sign = parts[1][:1]
            exponent = "%04d" % float(parts[1][1:])
            outStr = parts[0] + 'E' +  sign + exponent
            return(outStr)
            
        f = open(outFName, 'w')
        creditText = "Input file for Annealing program.\n\n"
        creditText += "This file generated by QMarxanTools\n"
        creditText += "created by Apropos Information Systems Inc.\n\n"
        f.write(creditText)
        f.write("General Parameters\n")
        f.write("VERSION 0.1\n")
        f.write("BLM %s\n" % (formatAsME(1.0)))
        f.write("PROP %s\n" % (formatAsME(0.5)))
        f.write("RANDSEED -1\n")
        f.write("NUMREPS 100\n")
        f.write("\nAnnealing Parameters\n")
        f.write("NUMITNS 1000000\n")
        f.write("STARTTEMP %s\n" % (formatAsME(-1.0)))
        f.write("COOLFAC %s\n" % (formatAsME(-1.0)))
        f.write("NUMTEMP 10000\n")
        f.write("\nCost Threshold\n")
        f.write("COSTTHRESH %s\n" % (formatAsME(0.0)))
        f.write("THRESHPEN1 %s\n" % (formatAsME(0.0)))
        f.write("THRESHPEN2 %s\n" % (formatAsME(0.0)))
        f.write("\nInput Files\n")
        f.write("INPUTDIR input\n")
        f.write("SPECNAME spec.dat\n")
        f.write("PUNAME pu.dat\n")
        f.write("PUVSPRNAME puvsp.dat\n")
        f.write("BOUNDNAME bound.dat\n")
        f.write("MATRIXSPORDERNAME puvsp_sporder.dat\n")
        f.write("\nSave Files\n")
        f.write("SCENNAME output\n")
        f.write("SAVERUN 3\n")
        f.write("SAVEBEST 3\n")
        f.write("SAVESUMMARY 3\n")
        f.write("SAVESCEN 3\n")
        f.write("SAVETARGMET 3\n")
        f.write("SAVESUMSOLN 3\n")
        f.write("SAVELOG 3\n")
        f.write("SAVESNAPSTEPS 0\n")
        f.write("SAVESNAPCHANGES 0\n")
        f.write("SAVESNAPFREQUENCY 0\n")
        f.write("OUTPUTDIR output\n")
        f.write("%sProgram control.\n")
        f.write("RUNMODE 1\n")
        f.write("MISSLEVEL %s\n" % formatAsME(0.95))
        f.write("ITIMPTYPE 1\n")
        f.write("HEURTYPE -1\n")
        f.write("CLUMPTYPE 0\n")
        f.write("VERBOSITY 2\n")
        f.write("SAVESOLUTIONSMATRIX 3\n")
        f.write("\n")
        f.close()

    def processAlgorithm(self, progress):
        """Here is where the processing itself takes place."""
        oFName = self.getParameterValue(self.OUT_DIR)
        if os.path.exists(oFName):
            #QgsMessageLog.logMessage(oFName)
            progress.setText('Creating Directories')
            iDir = os.path.join(oFName,'input')
            if not os.path.exists(iDir):
                os.mkdir(iDir)
            progress.setPercentage(25)
            oDir = os.path.join(oFName,'output')
            if not os.path.exists(oDir):
                os.mkdir(oDir)
            progress.setPercentage(50)
            puDir = os.path.join(oFName,'pu')
            if not os.path.exists(puDir):
                os.mkdir(puDir)
            iName = os.path.join(oFName,'input.dat')
            progress.setPercentage(75)
            progress.setText('Writing input.dat file')
            self.createInputFile(iName)
            progress.setPercentage(99)
        else:
            #QgsMessageLog.logMessage('%s not found' % oFName)
            return False
